server {
    listen 80;
    server_name www.foobarflies.io foobarflies.io;
    return 301 https://www.foobarflies.io$request_uri;
}
server {
    server_name foobarflies.io;

    include ssl.conf;

    ssl_certificate /etc/letsencrypt/live/foobarflies.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/foobarflies.io/privkey.pem;

    return 301 https://www.foobarflies.io$request_uri;
}
server {
    server_name www.foobarflies.io;

    set $app "foobarflies.io";
    access_log /var/log/nginx/all.access.log custom;

    location ^~ /.well-known/acme-challenge/ {

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # This directory must be the same as in /etc/letsencrypt/cli.ini
        # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
        # there to "webroot".
        # Do NOT use alias, use root! Target directory is located here:
        # /var/www/common/letsencrypt/.well-known/acme-challenge/
        root         /home/tchap/www/foobarflies/current/;
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
        return 404;
    }

    # Favicons and robots
    include favicon.robots.conf;

    client_max_body_size 10m;

    include ssl.conf;

    ssl_certificate /etc/letsencrypt/live/foobarflies.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/foobarflies.io/privkey.pem;

    location / {
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        proxy_pass         http://127.0.0.1:4369;
    }
}